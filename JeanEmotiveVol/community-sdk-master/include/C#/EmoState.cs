using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Emotiv
{
    /// <summary>
    /// EmoStates are generated by the Emotiv detection engine (EmoEngine) and represent
    /// the emotional status of the user at a given time.
    /// </summary>
    public class EmoState : ICloneable
    {
        private IntPtr hEmoState;       
       
        /// <summary>
        /// Copy constructor
        /// </summary>
        /// <param name="es">EmoState to be copied</param>
        public EmoState(EmoState es)
        {
            this.hEmoState = EdkDll.IS_Create();
            EdkDll.IS_Copy(this.hEmoState, es.GetHandle());
        }

        /// <summary>
        /// Constructor
        /// </summary>
        public EmoState()
        {
            hEmoState = EdkDll.IS_Create();
        }

        /// <summary>
        /// Destructor
        /// </summary>
        ~EmoState()
        {
            if (hEmoState != null)
                EdkDll.IS_Free(hEmoState);
        }

        /// <summary>
        /// Retuns handle which is used to represent the internal structure of EmoState in the unmanged dll
        /// </summary>
        /// <returns>Internal structure of EmoState in the unmanged dll</returns>
        public IntPtr GetHandle()
        {
            return hEmoState;
        }

        /// <summary>
        /// Clones the current EmoState
        /// </summary>
        /// <returns>Copy of the current EmoState</returns>
        public Object Clone(){
            return new EmoState(this);
        }

        /// <summary>
        /// Return the time since EmoEngine has been successfully connected to the headset
        /// </summary>
        /// <remarks>
        /// If the headset is disconnected from EmoEngine due to low battery or weak
		/// wireless signal, the time will be reset to zero.
        /// </remarks>
        /// <returns>time in second</returns>
        public Single GetTimeFromStart()
        {
            return EdkDll.IS_GetTimeFromStart(hEmoState);
        }

        /// <summary>
        /// Return whether the headset has been put on correctly or not
        /// </summary>
        /// <remarks>
        /// If the headset cannot not be detected on the head, then signal quality will not report
		/// any results for all the channels
        /// </remarks>
        /// <returns>int (1: On, 0: Off)</returns>
        public Int32 GetHeadsetOn()
        {
            return EdkDll.IS_GetHeadsetOn(hEmoState);
        }

        /// <summary>
        /// Query the number of channels of available sensor contact quality data
        /// </summary>
        /// <returns>number of channels for which contact quality data is available</returns>
        public Int32 GetNumContactQualityChannels()
        {
            return EdkDll.IS_GetNumContactQualityChannels(hEmoState);
        }

        /// <summary>
        /// Query the contact quality of a specific EEG electrode
        /// </summary>
        /// <param name="electroIdx">The index of the electrode for query</param>
        /// <returns>Enumerated value that characterizes the EEG electrode contact for the specified input channel</returns>
        public EdkDll.IEE_EEG_ContactQuality_t GetContactQuality(Int32 electroIdx)
        {
            return EdkDll.IS_GetContactQuality(hEmoState, electroIdx);
        }

        /// <summary>
        /// Query the contact quality of all the electrodes in one single call
        /// </summary>
        /// <remarks>
        /// The contact quality will be stored in the array, contactQuality, passed to the function.
		/// The value stored in contactQuality[0] is identical to the result returned by
		/// IS_GetContactQuality(state, 0)
		/// The value stored in contactQuality[1] is identical to the result returned by
		/// IS_GetContactQuality(state, 1). etc.
		/// The ordering of the array is consistent with the ordering of the logical input
        /// channels in IEE_InputChannels_enum.
        /// </remarks>
        /// <returns>Number of signal quality values copied to the contactQuality array.</returns>
        public EdkDll.IEE_EEG_ContactQuality_t[] GetContactQualityFromAllChannels()
        {
            EdkDll.IEE_EEG_ContactQuality_t[] contactQuality;
            EdkDll.IS_GetContactQualityFromAllChannels(hEmoState, out contactQuality);
            return contactQuality;
        }

        /// <summary>
        /// Query of the current wireless signal strength
        /// </summary>
        /// <returns>
        /// wireless signal strength [No Signal, Bad, Fair, Good, Excellent].
        /// </returns>
        public EdkDll.IEE_SignalStrength_t GetWirelessSignalStatus()
        {
            return EdkDll.IS_GetWirelessSignalStatus(hEmoState);
        }

        /// <summary>
        /// Get the level of charge remaining in the headset battery
        /// </summary>
        /// <param name="chargeLevel">the current level of charge in the headset battery</param>
        /// <param name="maxChargeLevel">the maximum level of charge in the battery</param>
        public void GetBatteryChargeLevel(out Int32 chargeLevel, out Int32 maxChargeLevel)
        {
            EdkDll.IS_GetBatteryChargeLevel(hEmoState, out chargeLevel, out maxChargeLevel);
        }

        /// <summary>
        /// Query whether the user is blinking at the time the EmoState is captured.
        /// </summary>
        /// <returns>blink status (true: blink, false: not blink)</returns>
        public Boolean FacialExpressionIsBlink()
        {
            return EdkDll.IS_FacialExpressionIsBlink(hEmoState);
        }

        /// <summary>
        /// Query whether the user is winking left at the time the EmoState is captured.
        /// </summary>
        /// <returns>left wink status (true: wink, false: not wink)</returns>
        public Boolean FacialExpressionIsLeftWink()
        {
            return EdkDll.IS_FacialExpressionIsLeftWink(hEmoState);
        }

        /// <summary>
        /// Query whether the user is winking right at the time the EmoState is captured.
        /// </summary>
        /// <returns>right wink status (true: wink, false: not wink)</returns>
        public Boolean FacialExpressionIsRightWink()
        {
            return EdkDll.IS_FacialExpressionIsRightWink(hEmoState);
        }

        /// <summary>
        /// Query whether the eyes of the user are opened at the time the EmoState is captured.
        /// </summary>
        /// <returns>eye open status (true: eyes open, false: eyes closed)</returns>
        public Boolean FacialExpressionIsEyesOpen()
        {
            return EdkDll.IS_FacialExpressionIsEyesOpen(hEmoState);
        }

        /// <summary>
        /// Query whether the user is looking up at the time the EmoState is captured.
        /// </summary>
        /// <returns>eyes position (true: looking up, false: not looking up)</returns>
        public Boolean FacialExpressionIsLookingUp()
        {
            return EdkDll.IS_FacialExpressionIsLookingUp(hEmoState);
        }

        /// <summary>
        /// Query whether the user is looking down at the time the EmoState is captured.
        /// </summary>
        /// <returns>eyes position (true: looking down, false: not looking down)</returns>
        public Boolean FacialExpressionIsLookingDown()
        {
            return EdkDll.IS_FacialExpressionIsLookingDown(hEmoState);
        }

        /// <summary>
        /// Query whether the user is looking left at the time the EmoState is captured with EPOC/EPOC+ headset.
        /// </summary>
        /// <returns>return eye position (1: looking left, 0: not looking left)</returns>
        public Int32 FacialExpressionIsLookingLeft()
        {
            return EdkDll.IS_FacialExpressionIsLookingLeft(hEmoState);
        }

        /// <summary>
        /// Query whether the user is looking right at the time the EmoState is captured with EPOC/EPOC+ headset.
        /// </summary>
        /// <returns>return eye position (1: looking right, 0: not looking right)</returns>
        public Int32 FacialExpressionIsLookingRight()
        {
            return EdkDll.IS_FacialExpressionIsLookingRight(hEmoState);
        }

        /// <summary>
        /// Query the eyelids state of the user
        /// </summary>
        /// <remarks>
        /// The left and right eyelid state are stored in the parameter leftEye and rightEye
		/// respectively. They are floating point values ranging from 0.0 to 1.0.
		/// 0.0 indicates that the eyelid is fully opened while 1.0 indicates that the
        /// eyelid is fully closed.
        /// </remarks>
        /// <param name="leftEye">the left eyelid state (0.0 to 1.0)</param>
        /// <param name="rightEye">the right eyelid state (0.0 to 1.0)</param>
        public void FacialExpressionGetEyelidState(out Single leftEye, out Single rightEye)
        {
            EdkDll.IS_FacialExpressionGetEyelidState(hEmoState, out leftEye, out rightEye);
        }

        /// <summary>
        /// Query the eyes position of the user
        /// </summary>
        /// <remarks>
        /// The horizontal and vertical position of the eyes are stored in the parameter x and y
		/// respectively. They are floating point values ranging from -1.0 to 1.0.
		/// 
		/// For horizontal position, -1.0 indicates that the user is looking left while
		/// 1.0 indicates that the user is looking right.
		/// 
		/// For vertical position, -1.0 indicates that the user is looking down while
		/// 1.0 indicatest that the user is looking up.
        /// 
		/// This function assumes that both eyes have the same horizontal or vertical positions.
        /// (i.e. no cross eyes)
        /// </remarks>
        /// <param name="x">the horizontal position of the eyes</param>
        /// <param name="y">the veritcal position of the eyes</param>
        public void FacialExpressionGetEyeLocation(out Single x, out Single y)
        {
            EdkDll.IS_FacialExpressionGetEyeLocation(hEmoState, out x, out y);
        }

        /// <summary>
        /// Returns the eyebrow extent of the user (Obsolete function)
        /// </summary>
        /// <returns>eyebrow extent value (0.0 to 1.0)</returns>
        public Single FacialExpressionGetEyebrowExtent()
        {
            return EdkDll.IS_FacialExpressionGetEyebrowExtent(hEmoState);
        }

        /// <summary>
        /// Returns the smile extent of the user (Obsolete function)
        /// </summary>
        /// <returns>smile extent value (0.0 to 1.0)</returns>
        public Single FacialExpressionGetSmileExtent()
        {
            return EdkDll.IS_FacialExpressionGetSmileExtent(hEmoState);
        }

        /// <summary>
        /// Returns the clench extent of the user (Obsolete function)
        /// </summary>
        /// <returns>clench extent value (0.0 to 1.0)</returns>
        public Single FacialExpressionGetClenchExtent()
        {
            return EdkDll.IS_FacialExpressionGetClenchExtent(hEmoState);
        }

        /// <summary>
        /// Returns the detected upper face Expressiv action of the user
        /// </summary>
        /// <returns>pre-defined Expressiv action types</returns>
        public EdkDll.IEE_FacialExpressionAlgo_t FacialExpressionGetUpperFaceAction()
        {
            return EdkDll.IS_FacialExpressionGetUpperFaceAction(hEmoState);
        }

        /// <summary>
        /// Returns the detected upper face Expressiv action power of the user
        /// </summary>
        /// <returns>power value (0.0 to 1.0)</returns>
        public Single FacialExpressionGetUpperFaceActionPower()
        {
            return EdkDll.IS_FacialExpressionGetUpperFaceActionPower(hEmoState);
        }

        /// <summary>
        /// Returns the detected lower face Expressiv action of the user
        /// </summary>
        /// <returns>pre-defined Expressiv action types</returns>
        public EdkDll.IEE_FacialExpressionAlgo_t FacialExpressionGetLowerFaceAction()
        {
            return EdkDll.IS_FacialExpressionGetLowerFaceAction(hEmoState);
        }

        /// <summary>
        /// Returns the detected lower face Expressiv action power of the user
        /// </summary>
        /// <returns>power value (0.0 to 1.0)</returns>
        public Single FacialExpressionGetLowerFaceActionPower()
        {
            return EdkDll.IS_FacialExpressionGetLowerFaceActionPower(hEmoState);
        }

        /// <summary>
        /// Query whether the signal is too noisy for Expressiv detection to be active
        /// </summary>
        /// <param name="type">Expressiv detection type</param>
        /// <returns>detection state (false: Not Active, true: Active)</returns>
        public Boolean FacialExpressionIsActive(EdkDll.IEE_FacialExpressionAlgo_t type)
        {
            return EdkDll.IS_FacialExpressionIsActive(hEmoState, type);
        }
        
        /// <summary>
        /// Returns the long term excitement level of the user
        /// </summary>
        /// <returns>excitement level (0.0 to 1.0)</returns>
        public Single PerformanceMetricGetExcitementLongTermScore()
        {
            return PerformanceMetric.IS_PerformanceMetricGetExcitementLongTermScore(hEmoState);
        }
        
        /// <summary>
        /// Returns short term excitement level of the user
        /// </summary>
        /// <returns>excitement level (0.0 to 1.0)</returns>
        
        public Single PerformanceMetricInstantaneousExcitementTermScore()
        {
            return PerformanceMetric.IS_PerformanceMetricGetInstantaneousExcitementScore(hEmoState);
        }


        /// <summary>
        /// Query whether the signal is too noisy for PerformanceMetric detection to be active
        /// </summary>
        /// <param name="type">PerformanceMetric detection type</param>
        /// <returns>detection state (false: Not Active, true: Active)</returns>
        public Boolean PerformanceMetricIsActive(PerformanceMetric.IEE_PerformanceMetricAlgo_t type)
        {
            return PerformanceMetric.IS_PerformanceMetricIsActive(hEmoState, type);
        }

        /// <summary>
        /// Returns meditation level of the user
        /// </summary>
        /// <returns>meditation level (0.0 to 1.0)</returns>
        public Single PerformanceMetricGetRelaxationScore()
        {
            return PerformanceMetric.IS_PerformanceMetricGetRelaxationScore(hEmoState);
        }

        /// <summary>
        /// Returns focus level of the user
        /// </summary>
        /// <returns>focus level (0.0 to 1.0)</returns>
        public Single PerformanceMetricGetFocusScore()
        {
            return PerformanceMetric.IS_PerformanceMetricGetFocusScore(hEmoState);
        }

        /// <summary>
        /// Returns frustration level of the user
        /// </summary>
        /// <returns>frustration level (0.0 to 1.0)</returns>
        public Single PerformanceMetricGetFrustrationScore()
        {
            return PerformanceMetric.IS_PerformanceMetricGetStressScore(hEmoState);
        }
 
        /// <summary>
        /// Returns engagement/boredom level of the user
        /// </summary>
        /// <returns>engagement/boredom level (0.0 to 1.0)</returns>
        public Single PerformanceMetricGetEngagementBoredomScore()
        {
            return PerformanceMetric.IS_PerformanceMetricGetEngagementBoredomScore(hEmoState);
        }
 
        /// <summary>
        /// Returns Interest level of the user
        /// </summary>
        /// <returns>interest level (0.0 to 1.0)</returns>
        public Single PerformanceMetricGetInterestScore()
        {
            return PerformanceMetric.IS_PerformanceMetricGetInterestScore(hEmoState);
        }

        /// <summary>
        /// Returns the detected Cognitiv action of the user
        /// </summary>
        /// <returns>Cognitiv action type</returns>
        public EdkDll.IEE_MentalCommandAction_t MentalCommandGetCurrentAction()
        {
            return EdkDll.IS_MentalCommandGetCurrentAction(hEmoState);
        }

        /// <summary>
        /// Returns the detected Cognitiv action power of the user
        /// </summary>
        /// <returns>Cognitiv action power (0.0 to 1.0)</returns>
        public Single MentalCommandGetCurrentActionPower()
        {
            return EdkDll.IS_MentalCommandGetCurrentActionPower(hEmoState);
        }

        /// <summary>
        /// Query whether the signal is too noisy for Cognitiv detection to be active
        /// </summary>
        /// <returns>detection state (false: Not Active, true: Active)</returns>
        public Boolean MentalCommandIsActive()
        {
            return EdkDll.IS_MentalCommandIsActive(hEmoState);
        }


        /// <summary>
        /// Check whether two states are with identical 'emotiv' state
        /// </summary>
        /// <param name="state">EmoState</param>
        /// <returns>true: Equal, false: Different</returns>
        public Boolean PerformanceMetricEqual(EmoState state)
        {
            return PerformanceMetric.IS_PerformanceMetricEqual(GetHandle(), state.GetHandle());
        }


        /// <summary>
        /// Check whether two states are with identical Expressiv state, i.e. are both state representing the same facial expression
        /// </summary>
        /// <param name="state">EmoState</param>
        /// <returns>true: Equal, false: Different</returns>
        public Boolean FacialExpressionEqual(EmoState state)
        {
            return EdkDll.IS_FacialExpressionEqual(GetHandle(), state.GetHandle());
        }

        /// <summary>
        /// Check whether two states are with identical Cognitiv state
        /// </summary>
        /// <param name="state">EmoState</param>
        /// <returns>true: Equal, false: Different</returns>
        public Boolean MentalCommandEqual(EmoState state)
        {
            return EdkDll.IS_MentalCommandEqual(GetHandle(), state.GetHandle());
        }

        /// <summary>
        /// Check whether two states are with identical EmoEngine state.
        /// </summary>
        /// <remarks>
        /// This function is comparing the time since EmoEngine start,
        /// the wireless signal strength and the signal quality of different channels
        /// </remarks>
        /// <param name="state">EmoState</param>
        /// <returns>true: Equal, false: Different</returns>
        public Boolean EmoEngineEqual(EmoState state)
        {
            return EdkDll.IS_EmoEngineEqual(GetHandle(), state.GetHandle());
        }

        /// <summary>
        /// Check whether two EmoStateHandles are identical
        /// </summary>
        /// <param name="a">EmoState</param>
        /// <param name="b">EmoState</param>
        /// <returns></returns>
        public Boolean Equals (EmoState a, EmoState b)
        {
            return EdkDll.IS_Equal(a.GetHandle(), b.GetHandle());
        }

        /// <summary>
        /// Returns short term excitement model parameters
        /// </summary>
        /// <param name="rawScore"> return raw score</param>
        /// <param name="minScale,maxScale"> return scale range</param>
        /// <returns></returns>
        public void PerformanceMetricGetInstantaneousExcitementModelParams(out Double rawScore, out Double minScale, out Double maxScale)
        {
            PerformanceMetric.IS_PerformanceMetricGetInstantaneousExcitementModelParams(hEmoState, out rawScore, out minScale, out maxScale);
        }

        /// <summary>
        /// Returns Meditation model parameters
        /// </summary>
        /// <param name="rawScore"> return raw score</param>
        /// <param name="minScale,maxScale"> return scale range</param>
        /// <returns></returns>
        public void PerformanceMetricGetRelaxationModelParams(out Double rawScore, out Double minScale, out Double maxScale)
        {
            PerformanceMetric.IS_PerformanceMetricGetRelaxationModelParams(hEmoState, out rawScore, out minScale, out maxScale);
        }
        /// <summary>
        /// Returns EngagementBoredom model parameters
        /// </summary>
        /// <param name="rawScore"> return raw score</param>
        /// <param name="minScale,maxScale"> return scale range</param>
        /// <returns></returns>
        public void PerformanceMetricGetEngagementBoredomModelParams(out Double rawScore, out Double minScale, out Double maxScale)
        {
            PerformanceMetric.IS_PerformanceMetricGetEngagementBoredomModelParams(hEmoState, out rawScore, out minScale, out maxScale);
        }

        /// <summary>
        ///  Returns Frustration model parameters
        /// </summary>
        /// <param name="rawScore"> return raw score</param>
        /// <param name="minScale,maxScale"> return scale range</param>
        /// <returns></returns>
        public void PerformanceMetricGetStressModelParams(out Double rawScore, out Double minScale, out Double maxScale)
        {
            PerformanceMetric.IS_PerformanceMetricGetStressModelParams(hEmoState, out rawScore, out minScale, out maxScale);
        }

        /// <summary>
        ///  Returns Interest model parameters
        /// </summary>
        /// <param name="rawScore"> return raw score</param>
        /// <param name="minScale,maxScale"> return scale range</param>
        /// <returns></returns>
        public void PerformanceMetricGetInterestModelParams(out Double rawScore, out Double minScale, out Double maxScale)
        {
            PerformanceMetric.IS_PerformanceMetricGetInterestModelParams(hEmoState, out rawScore, out minScale, out maxScale);
        }

        /// <summary>
        ///  Returns Focus model parameters
        /// </summary>
        /// <param name="rawScore"> return raw score</param>
        /// <param name="minScale,maxScale"> return scale range</param>
        /// <returns></returns>
        public void PerformanceMetricGetFocusModelParams(out Double rawScore, out Double minScale, out Double maxScale)
        {
            PerformanceMetric.IS_PerformanceMetricGetFocusModelParams(hEmoState, out rawScore, out minScale, out maxScale);
        }   
    }
}
