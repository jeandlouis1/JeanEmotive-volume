cmake_minimum_required(VERSION 3.0.0)
project(community-sdk)

set(COMMUNITY_SDK_CXX_EXAMPLES_BASIC_DIR ${PROJECT_SOURCE_DIR}/examples_basic/C++)
set(COMMUNITY_SDK_CXX_EXAMPLES_PRIME_DIR ${PROJECT_SOURCE_DIR}/examples_extra_prime/C++)
set(COMMUNITY_SDK_BIN_DIR ${PROJECT_SOURCE_DIR}/bin)
set(COMMUNITY_SDK_LIB_DIR ${PROJECT_SOURCE_DIR}/lib)
set(COMMUNITY_SDK_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/include)

set(EXECUTABLE_OUTPUT_PATH  ${PROJECT_BINARY_DIR}/Programs CACHE PATH "Place where executables are stored")

if (WIN32)
        set(PROJECT_LINK_LIBS edk.lib)
    if(WIN64)
        set(GLUT_LIBS glut64.lib)
        link_directories( ${COMMUNITY_SDK_LIB_DIR}/win64)
        set(SDK_DLLS ${COMMUNITY_SDK_BIN_DIR}/win64/edk.dll)
        set(THIRD_PARTY_DLLS ${COMMUNITY_SDK_BIN_DIR}/win64/glut32.dll)
        set(CMAKE_EXE_LINKER_FLAGS "/machine:x64")
    else()
       # set(PROJECT_LINK_LIBS edk.lib)
        set(GLUT_LIBS glut32.lib)
        link_directories( ${COMMUNITY_SDK_LIB_DIR}/win32)
        set(SDK_DLLS ${COMMUNITY_SDK_BIN_DIR}/win32/edk.dll)
        set(THIRD_PARTY_DLLS ${COMMUNITY_SDK_BIN_DIR}/win32/glut32.dll)
    endif()
elseif(APPLE)
    set ( PROJECT_LINK_LIBS "-framework edk" )
elseif(UNIX)
    set ( PROJECT_LINK_LIBS libedk.so )
    if(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
       link_directories( ${COMMUNITY_SDK_BIN_DIR}/linux64 )
    elseif(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86")
       link_directories( ${COMMUNITY_SDK_BIN_DIR}/linux32 )
    else()
       link_directories( ${COMMUNITY_SDK_BIN_DIR}/armhf )
    endif()
endif()

message(STATUS "lib " ${PROJECT_LINK_LIBS})

add_subdirectory(${COMMUNITY_SDK_CXX_EXAMPLES_BASIC_DIR}/AverageBandPowers)
add_subdirectory(${COMMUNITY_SDK_CXX_EXAMPLES_PRIME_DIR}/ActivateLicense)
add_subdirectory(${COMMUNITY_SDK_CXX_EXAMPLES_PRIME_DIR}/EEGLogger)
add_subdirectory(${COMMUNITY_SDK_CXX_EXAMPLES_BASIC_DIR}/EmoStateLogger)
add_subdirectory(${COMMUNITY_SDK_CXX_EXAMPLES_BASIC_DIR}/FacialExpressionDemo)
add_subdirectory(${COMMUNITY_SDK_CXX_EXAMPLES_BASIC_DIR}/GyroData)
add_subdirectory(${COMMUNITY_SDK_CXX_EXAMPLES_BASIC_DIR}/HeadsetInformationLogger)
add_subdirectory(${COMMUNITY_SDK_CXX_EXAMPLES_BASIC_DIR}/MentalCommandDemo)
add_subdirectory(${COMMUNITY_SDK_CXX_EXAMPLES_BASIC_DIR}/MentalCommandWithCloudProfile)
add_subdirectory(${COMMUNITY_SDK_CXX_EXAMPLES_BASIC_DIR}/MentalCommandWithLocalProfile)
add_subdirectory(${COMMUNITY_SDK_CXX_EXAMPLES_BASIC_DIR}/MotionDataLogger)
add_subdirectory(${COMMUNITY_SDK_CXX_EXAMPLES_BASIC_DIR}/MultiDongleConnection)
add_subdirectory(${COMMUNITY_SDK_CXX_EXAMPLES_PRIME_DIR}/MultiDongleEEGLogger)
add_subdirectory(${COMMUNITY_SDK_CXX_EXAMPLES_PRIME_DIR}/MultilChannelEEGLogger)
add_subdirectory(${COMMUNITY_SDK_CXX_EXAMPLES_PRIME_DIR}/PerformanceMetricsDemo)
add_subdirectory(${COMMUNITY_SDK_CXX_EXAMPLES_BASIC_DIR}/SavingAndLoadingProfileCloud)

